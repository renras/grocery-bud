{"version":3,"sources":["Modal.js","store/groceryReducer.js","App.js","store/store.js","index.js"],"names":["Modal","modalContent","closeModal","modal","useEffect","setTimeout","ref","className","grocerySlice","createSlice","name","initialState","groceryList","isModalOpen","isEditing","groceryItem","editID","reducers","addItem","state","action","newGroceryList","payload","removeItem","filter","id","clearItems","editItem","map","editingMode","inputOnChange","noValue","groceryActions","actions","App","dispatch","useDispatch","useRef","useSelector","grocery","current","style","backgroundColor","error","onSubmit","e","preventDefault","newItem","Date","getTime","toString","type","value","onChange","target","placeholder","onClick","icon","faEdit","faTrash","length","store","configureStore","reducer","groceryReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b61b5de1.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nconst Modal = ({ modalContent, closeModal, modal }) => {\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      closeModal();\r\n    }, 3000);\r\n  });\r\n  return (\r\n    <>\r\n      <p ref={modal} className=\"modalContent\">\r\n        {modalContent}\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialGroceryState = {\r\n  groceryList: [],\r\n  isModalOpen: false,\r\n  modalContent: \"\",\r\n  isEditing: false,\r\n  groceryItem: \"\",\r\n  editID: null,\r\n};\r\n\r\nconst grocerySlice = createSlice({\r\n  name: \"grocery\",\r\n  initialState: initialGroceryState,\r\n  reducers: {\r\n    addItem(state, action) {\r\n      const newGroceryList = [...state.groceryList, action.payload];\r\n\r\n      state.groceryList = newGroceryList;\r\n      state.isModalOpen = true;\r\n      state.modalContent = \"item added\";\r\n      state.groceryItem = \"\";\r\n    },\r\n    removeItem(state, action) {\r\n      const newGroceryList = state.groceryList.filter(\r\n        (groceryItem) => groceryItem.id !== action.payload\r\n      );\r\n      state.groceryList = newGroceryList;\r\n      state.modalContent = \"item removed\";\r\n      state.isModalOpen = true;\r\n    },\r\n    clearItems(state) {\r\n      state.groceryList = [];\r\n      state.modalContent = \"items cleared\";\r\n      state.isModalOpen = true;\r\n    },\r\n    editItem(state) {\r\n      const newGroceryList = state.groceryList.map((groceryItem) => {\r\n        if (groceryItem.id === state.editID) {\r\n          groceryItem.name = state.groceryItem;\r\n        }\r\n        return groceryItem;\r\n      });\r\n      state.groceryList = newGroceryList;\r\n      state.isEditing = false;\r\n      state.groceryItem = \"\";\r\n      state.isModalOpen = false;\r\n    },\r\n    editingMode(state, action) {\r\n      state.modalContent = \"enter new name\";\r\n      state.groceryItem = action.payload.name;\r\n      state.isEditing = true;\r\n      state.editID = action.payload.id;\r\n      state.isModalOpen = true;\r\n    },\r\n    inputOnChange(state, action) {\r\n      state.groceryItem = action.payload;\r\n    },\r\n    closeModal(state) {\r\n      state.isModalOpen = false;\r\n    },\r\n    noValue(state) {\r\n      state.modalContent = \"please enter a value\";\r\n      state.isModalOpen = true;\r\n    },\r\n  },\r\n});\r\n\r\nexport const groceryActions = grocerySlice.actions;\r\n\r\nexport default grocerySlice.reducer;\r\n","import React, { useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"./Modal\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { groceryActions } from \"./store/groceryReducer\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const modal = useRef(null);\n  const groceryItem = useSelector((state) => state.grocery.groceryItem);\n  const isEditing = useSelector((state) => state.grocery.isEditing);\n  const modalContent = useSelector((state) => state.grocery.modalContent);\n  const isModalOpen = useSelector((state) => state.grocery.isModalOpen);\n  const groceryList = useSelector((state) => state.grocery.groceryList);\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    if (groceryItem && !isEditing) {\n      const newItem = {\n        id: new Date().getTime().toString(),\n        name: groceryItem,\n      };\n      dispatch(groceryActions.addItem(newItem));\n    } else if (groceryItem && isEditing) {\n      dispatch(groceryActions.editItem());\n    } else {\n      dispatch(groceryActions.noValue());\n    }\n  };\n\n  useEffect(() => {\n    try {\n      if (modalContent === \"item removed\" || modalContent === \"items cleared\") {\n        modal.current.style.backgroundColor = \"#ff9999\";\n      } else {\n        modal.current.style.backgroundColor = \"#e9fce9\";\n      }\n    } catch (error) {}\n  });\n\n  const closeModal = () => {\n    dispatch(groceryActions.closeModal());\n  };\n\n  return (\n    <main>\n      {isModalOpen && (\n        <Modal\n          closeModal={closeModal}\n          modal={modal}\n          modalContent={modalContent}\n        />\n      )}\n      <h1>Grocery Bud</h1>\n      <form onSubmit={handleFormSubmit}>\n        <input\n          type=\"text\"\n          name=\"groceryItem\"\n          id=\"groceryItem\"\n          value={groceryItem}\n          onChange={(e) =>\n            dispatch(groceryActions.inputOnChange(e.target.value))\n          }\n          placeholder=\"e.g. eggs\"\n        />\n        <button type=\"submit\">{isEditing ? \"edit\" : \"submit\"}</button>\n      </form>\n      <section>\n        {groceryList.map((groceryItem) => {\n          return (\n            <div className=\"groceryItem\" key={groceryItem.id}>\n              <p>{groceryItem.name}</p>\n              <span>\n                <FontAwesomeIcon\n                  className=\"editIcon\"\n                  onClick={() =>\n                    dispatch(groceryActions.editingMode(groceryItem))\n                  }\n                  icon={faEdit}\n                />\n                <FontAwesomeIcon\n                  className=\"trashIcon\"\n                  onClick={() =>\n                    dispatch(groceryActions.removeItem(groceryItem.id))\n                  }\n                  icon={faTrash}\n                />\n              </span>\n            </div>\n          );\n        })}\n      </section>\n      {groceryList.length > 0 && (\n        <button\n          className=\"clearItemsButton\"\n          onClick={() => dispatch(groceryActions.clearItems())}\n        >\n          Clear Items\n        </button>\n      )}\n    </main>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport groceryReducer from \"./groceryReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: { grocery: groceryReducer },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}